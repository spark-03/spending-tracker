streamlit
google-auth
google-auth-oauthlib
google-api-python-client
pandas
streamlit-extras

app.py

import streamlit as st
from streamlit_extras.badges import badge
from streamlit_extras.stylable_container import stylable_container
from streamlit_extras.let_it_rain import rain
from streamlit_extras.metric_cards import style_metric_cards

try:
    from email_reader import get_today_spending
except Exception as e:
    st.error("❌ Failed to import `email_reader.py`")
    st.exception(e)

# Set page config
st.set_page_config(page_title="Today's Spend", page_icon="💸", layout="centered")

# Title with emoji and style
st.markdown("""
    <h1 style='text-align: center; color: #4CAF50; font_size=24'>
        💳 Today's Debit Summary
    </h1>
""", unsafe_allow_html=True)

# Optional animation (confetti when app loads)
rain(emoji="💸", font_size=28, falling_speed=5, animation_length="short")

with st.spinner("🔍 Fetching today's debit messages..."):
    data = get_today_spending()

if not data:
    st.warning("🚫 No debit transactions found today.")
else:
    total = sum(d['amount'] for d in data)

    # Stylish metric
    st.markdown("### 💰 Summary")
    st.metric(label="Total Debited Today", value=f"₹{total:,.2f}", delta=None)
    style_metric_cards(background_color="111111", border_color="#4CAF50", border_left_color="#4CAF50", box_shadow=True)

    st.markdown("---")

    st.markdown("### 📋 Transaction Details")
    for txn in data:
        with stylable_container(
            key=f"txn_{txn['time']}",
            css_styles="""
                {
                    background-color: #111111;
                    padding: 16px;
                    border-radius: 12px;
                    border: 1px solid #e0e0e0;
                    margin-bottom: 10px;
                    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
                }
            """
        ):
            st.markdown(f"**🕒 {txn['time']}**  &nbsp;&nbsp; —  &nbsp;&nbsp; `₹{txn['amount']}`")
            st.markdown(f"**🔸 Purpose:** {txn['purpose']}")
            st.caption(f"📩 {txn['subject']}")

# Footer or credit
st.markdown("---")
st.markdown("<div style='text-align:center; color: black;'>Built with ❤️ using Streamlit</div>", unsafe_allow_html=True)


email_reader.py

import base64
import re
from google.auth.transport.requests import Request
import streamlit as st
from datetime import datetime, time
import pytz
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from email.utils import parsedate_to_datetime  # ✅ Robust date parser

SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

def get_credentials_from_secrets():
    secrets = st.secrets["google"]

    creds = Credentials(
        token=None,
        refresh_token=secrets["refresh_token"],
        token_uri=secrets["token_uri"],
        client_id=secrets["client_id"],
        client_secret=secrets["client_secret"],
        scopes=SCOPES
    )

    creds.refresh(Request())
    return creds

def extract_amount(text):
    match = re.search(r'(?:INR|₹|Rs\.?)\s?([\d,]+(?:\.\d{1,2})?)', text, re.IGNORECASE)
    if match:
        try:
            amount_str = match.group(1).replace(',', '')
            return float(amount_str)
        except:
            return None
    return None

def extract_purpose(text):
    match = re.search(r'(paid to|payment to|sent to|debited for|for|towards|UPI.*?@.*?|POS/[\w\s]+).{0,40}', text, re.IGNORECASE)
    if match:
        return match.group().strip()
    return "Unknown"

def get_today_spending():
    creds = get_credentials_from_secrets()
    service = build('gmail', 'v1', credentials=creds)

    # Set IST midnight and convert to UTC for Gmail query
    ist = pytz.timezone("Asia/Kolkata")
    midnight_ist = ist.localize(datetime.combine(datetime.now(ist).date(), time.min))
    midnight_utc = midnight_ist.astimezone(pytz.utc)
    after_unix = int(midnight_utc.timestamp())

    # Gmail API query: only emails after IST midnight
    query = f"subject:debited after:{after_unix}"
    result = service.users().messages().list(userId='me', q=query).execute()
    messages = result.get('messages', [])

    transactions = []

    for msg in messages:
        msg_data = service.users().messages().get(userId='me', id=msg['id'], format='full').execute()

        headers = msg_data['payload']['headers']
        date_str = next((h['value'] for h in headers if h['name'] == 'Date'), None)
        subject = next((h['value'] for h in headers if h['name'] == 'Subject'), "No Subject")

        # ✅ Parse any email date format with timezone
        try:
            msg_time_raw = parsedate_to_datetime(date_str)
            msg_time_ist = msg_time_raw.astimezone(ist)
        except Exception:
            continue

        payload = msg_data['payload']
        text = ''
        if 'parts' in payload:
            for part in payload['parts']:
                if part['mimeType'] == 'text/plain' and 'data' in part['body']:
                    text = base64.urlsafe_b64decode(part['body']['data']).decode('utf-8', errors='ignore')
                    break
        elif 'body' in payload and 'data' in payload['body']:
            text = base64.urlsafe_b64decode(payload['body']['data']).decode('utf-8', errors='ignore')

        amt = extract_amount(text)
        if amt:
            purpose = extract_purpose(text)
            transactions.append({
                'time': msg_time_ist.strftime("%H:%M"),  # ✅ Correct IST time
                'amount': amt,
                'purpose': purpose,
                'subject': subject
            })

    return transactions
